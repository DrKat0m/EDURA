{{!
    This file is part of Moodle - https://moodle.org/

    Moodle is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Moodle is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
}}
{{!
    @template mod_geniai/chat

    Example context (json):
    {
        "geniainame": "Name",
        "manage_capability": true,
        "message_01": "string",
        "message_02": "string"
    }
}}

<div id="page-mod-geniai-view">
  <div class="theme-toggle-container">
    <button id="theme-toggle-btn">
      <span class="theme-icon">🌙</span>
      <span class="theme-text">Dark Mode</span>
    </button>
  

<div class="geniai-scenario-select">
    <label for="geniai-scenario">👥 Select Parent Persona:</label>
    <select id="geniai-scenario" class="custom-select" onchange="handleScenarioChange(this.value)">
        {{#scenarios}}
            <option value="{{value}}">{{label}}</option>
        {{/scenarios}}
    </select>
</div>
</div>

  <div id="geniai-mod-popup">

    <input type="hidden" id="local_geniai_message_01" value="{{message_01}}">
    <input type="hidden" id="local_geniai_message_02" value="{{message_02}}">
    <a id="geniai-clear-history"
       title="{{#str}}clear_history_title,local_geniai{{/str}}"
       href="#"
       role="button"
       aria-label="{{#str}}clear_history_title,local_geniai{{/str}}">
        {{#pix}}icons/clear,local_geniai{{/pix}}
        <span class="clear-text">Clear Chat</span>
    </a>
    <div id="geniai-scrollarea">
        <div id="geniai-area-mensagens"></div>
    </div>
    <div id="geniai-sendarea">
            <textarea id="geniai-textarea" contenteditable="true"
                      placeholder="{{#str}}write_message,local_geniai{{/str}}"></textarea>

        <div id="geniai-icon-stop"
             style="display: none">
            {{#pix}}icons/stop,local_geniai{{/pix}}
        </div>
        
        <div id="geniai-icon-mic"
             title="{{#str}}send_message,local_geniai{{/str}}">
            {{#pix}}icons/mic,local_geniai{{/pix}}
        </div>
        <div id="geniai-icon-send" title="{{#str}}send_message,local_geniai{{/str}}">
            {{#pix}}icons/send,local_geniai{{/pix}}
        </div>
    </div>
</div>
</div>
<script>

document.addEventListener('DOMContentLoaded', function () {

    function handleScenarioChange(value) {
    localStorage.setItem('geniai-scenario', value);

    // Simulate a click on the Clear Chat button *first*
    const clearButton = document.getElementById('geniai-clear-history');
    if (clearButton) {
        clearButton.click();
    }
    const sendArea = document.getElementById("geniai-sendarea");
        if (sendArea) {
            sendArea.style.display = "flex";
        }


    // Delay setting the textarea + sending to ensure chat is cleared
    setTimeout(() => {
        const textarea = document.getElementById("geniai-textarea");
        textarea.value = `$$persona=${value}$$`;

        // Trigger input event if necessary
        textarea.dispatchEvent(new Event("input"));

        // Simulate click on send icon
        document.getElementById("geniai-icon-send")?.click();

        setTimeout(() => {
        const messages = document.querySelectorAll('.geniai-message.geniai-user');
        if (messages.length > 0) {
            const lastMessage = messages[messages.length - 1];
            if (lastMessage.textContent.includes("*/persona=")) {
                lastMessage.remove();
            }
        }
    }, 300);

        // Optional: Fire custom event
        document.dispatchEvent(new CustomEvent('scenarioChanged', { detail: value }));
    }, 200); // Small delay to let clear action finish
}
window.handleScenarioChange = handleScenarioChange;


    const toggleBtn = document.getElementById("theme-toggle-btn");
    const container = document.getElementById("page-mod-geniai-view");

    if (!toggleBtn) return;

    // Load saved theme preference on page load
    const savedTheme = localStorage.getItem("geniai-theme");
    if (savedTheme === "dark") {
        container.classList.add("dark-mode");
        toggleBtn.textContent = "☀️ Light Mode";
    }

    toggleBtn.addEventListener("click", function () {
        const isDark = container.classList.toggle("dark-mode");
        toggleBtn.textContent = isDark ? "☀️ Light Mode" : "🌙 Dark Mode";
        localStorage.setItem("geniai-theme", isDark ? "dark" : "light");
    });
    

const clearButton = document.getElementById('geniai-clear-history');
if (clearButton) {
    clearButton.addEventListener('click', () => {
        const sendArea = document.getElementById("geniai-sendarea");
        if (sendArea) {
            sendArea.style.display = "flex";
        }
    });
}


    const cmid = {{{cmid}}}; // Passed from PHP → Mustache

    function extractAndSendGrade() {
        const messages = document.querySelectorAll(".geniai-message.geniai-server");
        if (messages.length === 0) return;

        const last = messages[messages.length - 1];
        const text = last.textContent.trim();
        const match = text.match(/.*?Grade\s*-\s*(\d+(?:\.\d+)?)\s*out of\s*10.*?/i);

        if (match) {
            const grade = parseFloat(match[1]);
            console.log("Detected grade:", grade);

            const sendArea = document.getElementById("geniai-sendarea");
            if (sendArea) {
                sendArea.style.display = "none";
            }

            fetch(M.cfg.wwwroot + '/mod/geniai/gradeajax.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                cmid: cmid,
                grade: grade,
                sesskey: M.cfg.sesskey
                })


            })
            .then(res => res.json())
            .then(data => console.log("Grade response:", data))
            .catch(err => console.error("Grade error:", err));
        }
    }

    

    // Run after a small delay or after chat completes
    const target = document.getElementById('geniai-area-mensagens');
    if (target) {
        const observer = new MutationObserver(() => {
            extractAndSendGrade();
        });
        observer.observe(target, { childList: true, subtree: true });
    }

    
});
</script>

